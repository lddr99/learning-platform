<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://unpkg.com/vue-toasted"></script>

<h1 class="mt-5 mb-5 text-center">Management - Course Editor</h1>
<hr class="mb-5" />
<div id="app">

  <div class="container"
    v-if="!isAdmin"
  >
    <div class="row my-5 justify-content-center align-items-center">
      <div class="card text-white bg-secondary mb-3" style="width: 300px;">
        <div class="card-header">Login</div>
        <div class="card-body">
          <form ref="loginForm"
            @submit.prevent
          >
            <div class="form-group">
              <label for="email" class="sr-only">Email address</label>
              <input type="email" id="email" name="email" class="form-control" placeholder="Email address" autofocus="" required>
            </div>
            <div class="form-group">
              <label for="password" class="sr-only">Password</label>
              <input type="password" id="password" name="password" class="form-control" min="6" placeholder="Password" required>
            </div>
            <button class="btn btn-dark btn-lg btn-block" @click="onLogin">LogIn</button>
            <button class="btn btn-dark btn-lg btn-block" @click="onRegister">Register</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="container"
    v-if="isAdmin"
  >
    <div class="row row-cols-1 row-cols-md-3">
      <div class="col mb-4"
        v-for="(course, index) in courses"
        :key="course.id"
      >
        <div class="card text-white bg-dark">
          <div class="card-header">{{ course.title }}</div>
          <div class="card-body">
            <form @submit.prevent="onSubmit(course)">
              <div class="form-group">
                <label>主題</label>
                <input type="text" class="form-control" v-model="course.title" required>
              </div>
              <div class="form-group">
                <label>URL</label>
                <input type="text" class="form-control" v-model="course.url" required>
              </div>
              <div class="form-group">
                <label>描述</label>
                <input type="text" class="form-control" v-model="course.description">
              </div>
              <div class="form-group">
                <label>類型</label>
                <select class="custom-select" v-model="course.category_id">
                  <option v-for="category in categories" v-bind:value="category.id">
                    {{ category.name }}
                  </option>
                </select>
              </div>
              <div class="row form-group">
                <div class="col">
                  <label>價格</label>
                  <input type="number" step="0.01" class="form-control" v-model="course.price.amount" required>
                </div>
                <div class="col">
                  <label>幣別</label>
                  <select class="custom-select" v-model="course.price.currency_id">
                    <option v-for="currency in currencies" v-bind:value="currency.id">
                      {{ currency.name }}
                    </option>
                  </select>
                </div>
              </div>
              <div class="form-group">
                <label :for="'duration_of_days' + index">課程效期 {{ course.duration_of_days }} 天</label>
                <input type="range" class="custom-range" min="1" max="30"
                  :id="'duration_of_days' + index"
                  v-model="course.duration_of_days"
                >
              </div>
              <div class="form-group">
                <div class="custom-control custom-switch">
                  <input class="custom-control-input" type="checkbox" :id="'availableCheck' + index"
                    v-model="course.is_available"
                  >
                  <label class="custom-control-label" :for="'availableCheck' + index">
                    上架
                  </label>
                </div>
              </div>
              <div class="d-flex">
                <button type="button" class="flex-shrink-1 btn btn-outline-light"
                  @click.prevent="removeCourse(index, course)"
                >
                  刪除
                </button>
                &nbsp;
                <button type="submit" class="btn btn-primary" style="width: 77%;">儲存</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
    <button type="button" class="my-5 btn btn-warning btn-lg btn-block"
      @click.prevent="addCourse"
    >
      增加新課程
    </button>
    <div class="border-top my-5"></div>
    <button type="button" class="my-2 btn btn-secondary btn-lg btn-block"
      @click.prevent="fetchAll"
    >
      刷新課程資料
    </button>
    <button type="button" class="my-5 btn btn-secondary btn-lg btn-block"
      @click.prevent="onLogout"
    >
      登出
    </button>
  </div>
</div>
<script>
Vue.use(Toasted)

new Vue({
  el: '#app',
  data () {
    return {
      isAdmin: false,
      courseTemplate: {
        title: '',
        is_available: false,
        duration_of_days: 30,
        description: '',
        url: '',
        category_id: 1,
        price: {
          currency_id: 1,
          amount: '',
        },
      },
      courses: [],
      categories: [],
      currencies: [],
    }
  },
  created () {
    //
  },
  watch: {
    isAdmin: function (val) {
      if (val) {
        this.fetchAll();
      }
    },
  },
  methods: {
      fetchAll() {
        this.fetchCourses();
        this.fetchCategories();
        this.fetchCurrencies();

        this.$toasted.info(`獲取課程資料`).goAway(5000);
      },
      fetchCourses() {
        axios.get('/api/admin/courses')
          .then(({data}) => {
            this.courses = data;
          });
      },
      fetchCategories() {
        axios.get('/api/admin/categories')
          .then(({data}) => (this.categories = data));
      },
      fetchCurrencies() {
        axios.get('/api/admin/currencies')
          .then(({data}) => (this.currencies = data));
      },
      onSubmit(course) {
        course.id === undefined ? this.createCourse(course) : this.updateCourse(course);
      },
      createCourse(course) {
        const url = '/api/admin/courses';

        axios.post(url, course)
            .then(({ data }) => {
              course.id = data.id;
              this.$toasted.success(`建立課程 (${course.title})`).goAway(5000);
            })
            .catch(() => {
              this.$toasted.error(`建立課程失敗 (${course.title})`).goAway(5000);
            });
      },
      updateCourse(course) {
        const url = `/api/admin/courses/${course.id}`;

        axios.put(url, course)
            .then(() => {
              this.$toasted.success(`更新課程 (${course.title})`).goAway(5000);
            })
            .catch(() => {
              this.$toasted.error(`更新課程失敗 (${course.title})`).goAway(5000);
            });
      },
      deleteCourse(course) {
        const url = `/api/admin/courses/${course.id}`;

        axios.delete(url)
            .then(() => {
              this.$toasted.info(`刪除課程 (${course.title})`).goAway(5000);
            })
            .catch(() => {
              this.$toasted.error(`刪除課程失敗 (${course.title})`).goAway(5000);
            });
      },
      addCourse() {
        const course = JSON.parse(JSON.stringify(this.courseTemplate));

        this.courses.push(course);
      },
      removeCourse(deprecatedIndex, deprecatedCourse) {
        if (deprecatedCourse.id !== undefined) {
          this.deleteCourse(deprecatedCourse);
        }

        this.courses.splice(deprecatedIndex, 1);
      },
      onSignIn(url) {
        const form = this.$refs.loginForm;
        const formData = new FormData(form);

        axios.post(url, formData)
          .then( response => {
            this.isAdmin = response.data.data.is_admin;

            if (this.isAdmin) {
                this.setAuthHeader(response.headers);
            } else {
              this.$toasted.error(`你沒有管理權限`).goAway(5000);
            }
          })
          .catch(() => {
            this.$toasted.error(`帳號密碼錯誤或使用者已存在`).goAway(5000);
          });
      },
      setAuthHeader(responseHeaders) {
        let headers = {};

        headers['access-token'] = responseHeaders['access-token'];
        headers['token-type'] = responseHeaders['token-type'];
        headers['client'] = responseHeaders['client'];
        headers['expiry'] = responseHeaders['expiry'];
        headers['uid'] = responseHeaders['uid'];

        axios.defaults.headers.common = headers;
      },
      onLogin() {
        const url = '/api/v1/auth/sign_in';

        this.onSignIn(url);
      },
      onRegister() {
        const url = '/api/v1/auth';

        this.onSignIn(url);
      },
      onLogout() {
        axios.delete('/api/v1/auth/sign_out').then(() => {
          this.isAdmin = false;
        });
      },
  },
})
</script>
